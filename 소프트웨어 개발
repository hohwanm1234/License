2-1 데이터 입출력 구현
 

(1) 논리 데이터 저장소 확인
자료 구조(Data Structure)

자료 구조는 컴퓨터상 자료를 효율적으로 저장하기 위해 만들어진 논리적인 구조이다.
자료 구조의 분류는 선형 구조와 비선형 구조로 크게 나뉜다.
구조	설명	종류
선형 구조	데이터를 연속적으로 연결한 자료 구조	리스트, 스택, 큐, 데크
비선형 구조	데이터를 비연속적으로 연결한 자료 구조	트리, 그래프
 
선형 구조 > 리스트(List)

개념	설명
선형 리스트
(Linear List)	배열과 같이 연속되는 기억 장소에 저장되는 리스트
연결 리스트
(Linked List)	노드의 포인터 부분으로 서로 연결시킨 리스트
 
선형 구조 > 스택

스택(Stack)은 한 방향으로만 자료를 넣고 꺼낼 수 있는 LIFO(Last-In First-Out) 형식의 자료 구조이다.
한 방향으로만 PUSH와 POP을 이용하여 자료를 넣고 꺼낸다.
TOP은 스택에서 가장 위에 있는 데이터로, 스택 포인터(Stack Pointer)라고도 불린다.
스택 연산
PUSH: 데이터를 차례대로 스택에 넣는 연산
POP: 스택에서 가장 위에 있는 데이터를 하나씩 꺼내는 연산
 

선형 구조 > 큐

큐(Queue)는 한쪽 끝에서는 삽입 작업이 이뤄지고, 반대쪽 끝에서는 삭제 작업이 이루어지는 FIFO(First-In First-Out) 형식의 자료 구조이다.
한쪽에서는 ENQUEUE 연산을 이용하여 데이터를 넣고, 한쪽에서는 DEQUEUE 연산을 이용하여 데이터를 꺼낸다.
데이터가 꺼내는 쪽에서 가장 가까운 데이터를 Front라고 하고, 데이터를 넣는 쪽에서 가장 가까운 데이터를 Rear라고 한다.
큐 연산
ENQUEUE: 데이터를 차례대로 넣는 연산
DEQUEUE: 처음 저장된 데이터부터 하나씩 꺼내는 연산
 

선형 구조 > 데크

데크(Deque; Double Ended Queue)는 큐의 양쪽 끝에서 삽입과 삭제를 할 수 있는 자료 구조이다.
두 개의 포인터를 사용하여, 양쪽의 삭제/삽입이 가능하다.
데크를 이용한 스택과 큐의 구현이 가능하다.
데크연산
PUSH: 데이터를 차례대로 데크에 넣는 연산
POP: 데크에서 Front와 Rear에 있는 데이터를 하나씩 꺼내는 연산
 

비선형 구조 > 트리

트리(Tree)는 데이터들을 계층화시킨 자료 구조이다.
인덱스를 조작하는 방법으로 가장 많이 사용하는 구조이다.
트리는 노드(Node)와 노드를 연결하는(Link)로 구성된다.
배열과 달리 노드들이 포인터로 연결되어 노드의 상한선이 없다.
 트리(Tree) 용어

용어	설명
루트 노드(Root Node)	트리에서 부모가 없는 최상위 노드, 트리의 시작점
단말 노드(Leaf Node)	자식이 없는 노드, 트리의 가장 말단에 위치
레벨(Level)	루트 노드를 기준으로 특정 노드까지의 경로 길이
조상 노드(Ancestor Node)	특정 노드에서 루트에 이르는 경로상 모든 노드
자식 노드(Child Node)	특정 노드에서 연결된 다음 레벨의 노드
부모 노드(Parent Node)	특정 노드에 연결된 이전 레벨의 노드
형제 노드(Sibling)	같은 부모를 가진 노드
깊이(Depth)	루트 노드에서 특정 노드에 도달하기 위한 간선의 수
차수(Degree)	특정 노드에 연결된 자식 노드의 수
 트리 순회방법

구분	개념도	순회방법
전위 순회
(Pre-Order Traversal)	 	Root → Left → Right최상위 → 좌 → 우
중위 순회
(In-Order Traversal)	 	Left → Root → Right좌 → 최상위 →우
후위 순회
(Post-Order Traversal)	 	Left → Right → Root좌 → 우 → 최상위
 트리 순회방법 예시 바로가기

simuing.tistory.com/entry/2021-%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC-%ED%95%84%EA%B8%B0%EC%9A%94%EC%95%BD-%ED%8A%B8%EB%A6%AC-%EC%88%9C%ED%9A%8C%EB%B0%A9%EB%B2%95-%EC%B0%A8%EC%88%98-%EA%B5%AC%ED%95%98%EA%B8%B0

 이진 트리

차수(Degree)가 2 이하인 노드로 구성되어 자식이 둘 이하로 구성된 트리이다.

이진 트리 유형	개념도	설명
포화 이진 트리
(Full Binary Tree)	 	모든 레벨의 노드가 채워진 트리
완전 이진 트리
(Complete Binary Tree)	 	마지막 레벨을 제외하고
노드가 채워진 트리
편향 이진 트리
(Skewed Binary Tree)	 	노드의 왼쪽이나 오른쪽
한 곳만 노드가 존재하는 트리
 비선형 구조 - 그래프

그래프(Graph)는 노드(N; Node)와 노드를 연결하는 간선(E; Edge)을 하나로 모아 놓은 자료 구조이다.
트리(Tree)는 사이클이 없는 그래프이다.
그래프의 유형
방향 그래프: 정점을 연결하는 선에 방향이 있는 그래프, 최대 간선 수 = n(n-1)
무방향 그래프: 정점을 연결하는 선에 방향이 없는 그래프, 최대 간선 수 = n(n-1)/2
그래프의 표현방법
그래프 G = (V, E)
V(G) = 정점(Vertices)
E(G) = 간선(Edges)
그래프 용어
경로(Path) / 경로 길이(Path Length) / 단순 경로(Simple Path) / 사이클(Cycle)
논리 데이터 저장소
업무를 모델링 표기법으로 형상화한 데이터의 저장소이다.
 

논리 데이터 저장소 구조 (개속관)

구조	설명	표기
개체 (Entity)	관리할 대상이 되는 실체	 
속성 (Attribute)	관리할 정보의 구체적 항목	 
관계 (Relationship)	개체 간의 대응 관계	 
(2) 물리 데이터 저장소 설계
물리 데이터 저장소는 논리 데이터 모델을 사용하고자 하는 각 DBMS의 특성을 고려하여 데이터베이스 저장 구조(물리 데이터 모델)로 변환하기 위한 데이터 저장소이다.

 

물리 데이터 저장소 구성

테이블 제약조건(Constraint) 설계
인덱스(Index) 설계
뷰(View) 설계
속성: REPLACE, FORCE, NOFORCE, WITH CHECK OPTION, WITH READ ONLY
클러스터(Cluster) 설계
파티션(Partition) 설계
종류 (레해리컴): 레이지 파티셔닝 / 해시 파티셔닝 / 리스트 파티셔닝 / 컴포지트 파티셔닝
장점 (성가백합): 성능 향상 / 가용성 향상 / 백업 가능 / 경합 감소
디스크(Disk) 구성 설계
 

물리 데이터저장소  모델 변환 절차

단위 개체를 테이블로 변환
속성을 컬럼으로 변환
UID를 기본 키로 변환
관계를 외래 키로 변환
컬럼 유형과 길이 정의
반정규화 수행
 

반 정규화 수행 방법
구분	종류	설명
테이블 통합	슈퍼타입/서브타입
테이블 통합	1:1 관계, 1:M 관계를 통합하여 조인 횟수를 줄여 성능 향상
슈퍼타입/서브타입 테이블 통합을 통해 성능 향상
테이블 분할 (파티셔닝)	수평 분할	레코드 단위 분할
수직 분할	컬럼 단위 분할
중복 테이블 추가	집계 테이블 추가	집계 데이터를 위한 테이블 생성, 각 원본 테이블에 트리거를 설정하여 사용하는 것. 트리거의 오버헤드 유의 필요
진행 테이블 추가	이력 관리 등의 목적으로 추가하는 테이블, 기본키 설정
특정 부분만을
포함하는 테이블 추가	데이터가 많은 테이블의 특정 부분만을 사용하는 경우 해당 부분만으로 새로운 테이블 생성
컬럼 중복화	중복 허용	조인 성능 향상을 위한 중복 허용
ORM 프레임워크
ORM(Object-Relational Mapping) 프레임워크는 관계형 데이터베이스와 객체지향 프로그래밍 언어 간 호환되지 않는 데이터를 변환하는 프로그래밍 기법이다.

 

ORM 프레임워크 기술 유형

SQL Mapping
OR Mapping
 

ORM 프레임워크 절차

클래스 → 테이블 변환
애트리뷰트 → 컬럼 변환
클래스 간 관계 → 테이블 간 관계 변환
 

ORM 프레임워크 종류

부분적 ORM
완전 ORM
트랜잭션 인터페이스
트랜잭션 인터페이스(Transaction Interface)는 데이터베이스 트랜잭션의 입출력과 기능 형태를 정의한 인터페이스이다.
트랜잭션 인터페이스는 ACID 원칙을 기반으로 설계된다.
 

트랜잭션 인터페이스 특징

원자성(Automicity) / 일관성(Consistency) / 격리성(Isolation) / 영속성(Durability)

 

트랜잭션 인터페이스 설계

데이터 접근 방법 및 인터페이스를 절차적으로 명세한다.
대표적 사례: JDBC, ODBC 등
(3) 데이터 조작 프로시저 작성
프로시저

프로시저(Procedure)는 일련의 쿼리들을 마치 하나의 함수처럼 실행하기 위한 쿼리의 집합이다.
데이터베이스 내부에 저장되고 일정한 조건이 되면 자동으로 수행된다.
 

절차형 데이터 조작 프로시저

Oracle 기반 PL/SQL
개념: 표준 SQL을 기본으로 Oracle에서 개발한 데이터 조작 언어
장점: 컴파일 불필요, 모듈화 가능, 절차적 언어 사용, 에러 처리
구성: 선언부(Declare), 실행부(Begin/End), 예외부(Exception)
PL/SQL을 활용한 저장형 객체 활용 (프함패트)
저장된 프로시저(Stored Procedure)
저장된 함수(Stored Function)
저장된 패키지(Stored Package)
트리거(Trigger)
 

프로그램 디버깅

프로시저가 입력 자료를 받아 출력을 올바르게 도출하는지에 관한 확인 과정
 단위 테스트 도구

단위 테스트에서 구현된 프로시저의 적합성을 확인하기 위한 도구
 

PL/SQL 테스트

DBMS_OUTPUT 패키지를 사용한다.
 

DBMS_OUTPUT 패키지 기능

명령어	설명
DBMS_OUTPUT.DISABLE	메시지 버퍼 내용 삭제
DBMS_OUTPUT.ENABLE	메시지 버퍼 내용 할당
DBMS_OUTPUT.PUT	하나의 라인을 여러 번에 걸쳐 저장
DBMS_OUTPUT.PUT_LINE	PUT과 동일하나 버퍼에 저장되는 메시지의 마지막 라인 끝에 EOL 문자를 추가
DBMS_OUTPUT.GET_LINE	한 번 호출할 때마다 하나의 라인만을 읽어옴
DBMS_OUTPUT.GET_LINES	지정된 라인을 모두 읽어들임
(4) 데이터 조작 프로시저 최적화
쿼리(Query) 성능 측정

데이터베이스에서 프로시저에 있는 SQL 실행 계획을 분석, 수정을 통해 최소의 시간으로 원하는 결과를 얻도록 프로시저를 수정하는 사전 작업이다.

 

실행계획(EXPLAIN PLAN) 기반 쿼리 성능 측정

SQL 문의 성능개선을 할 수 있도록 SQL 문을 분석 및 해석하여 실행계획을 수립하고, 연관 테이블(plan-table)에 저장하도록 지원하는 도구이다.

 

SQL 성능 개선 절차

문제 있는 SQL 식별
옵티마이저 통계 확인
SQL문 재구성
인덱스 재구성
실행계획 유지관리
 

소스 코드 인스펙션

소스 코드 인스펙션(Source Code Inspection)은 데이터베이스 성능 향상을 위하여 프로시저 코드를 보면서 성능 문제점을 개선해 나가는 활동이다.
데이터 조작 프로시저 최적화를 위한 SQL 코드 인스펙션이 있다.
 

SQL 코드 인스펙션

대상: 미사용 변수 / 미사용 서브쿼리 / Null 값 비교 / 과거의 데이터 타입 사용
절차: 계획 → 개관 → 준비 → 검사 → 재작업 → 추적
 
트리 순회방법 예시 바로가기
simuing.tistory.com/entry/2021-%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC-%ED%95%84%EA%B8%B0%EC%9A%94%EC%95%BD-%ED%8A%B8%EB%A6%AC-%EC%88%9C%ED%9A%8C%EB%B0%A9%EB%B2%95-%EC%B0%A8%EC%88%98-%EA%B5%AC%ED%95%98%EA%B8%B0

 

[ 자료구조 > 트리] 
루트 노드(Root Node)
트리에서 부모가 없는 최상위 노드이며, 트리의 시작점을 뜻한다.

 

트리 차수(Degree)
특정 노드에 연결된 자식의 수를 뜻한다.

 

트리 순회방법
구분	개념도	순회방법
전위 순회
(Pre-Order Traversal)	 	Root → Left → Right루 좌 우
중위 순회
(In-Order Traversal)	 	Left → Root → Right좌 루 우
후위 순회
(Post-Order Traversal)	 	Left → Right → Root좌 우 루
트리 예시1

트리	구하고자 하는 정보	결과
 	차수	2
B의 차수	2
전위 순회 (Preorder)	A-B-D-E-C-F-G
중위 순회 (Inorder)	D-B-E-A-F-C-G
후위 순회 (Postorder)	D-E-B-F-G-C-A
 트리 예시2

트리	구하고자 하는 정보	결과
 	차수	2
B의 차수	2
전위 순회 (Preorder)	A-B-D-G-E-H-C-F-I-J
중위 순회 (Inorder)	G-D-B-H-E-A-C-I-F-J
후위 순회 (Postorder)	G-D-H-E-B-I-J-F-C-A
 트리 예시3

트리	구하고자 하는 정보	결과
 	차수	2
B의 차수	1
전위 순회 (Preorder)	A-B-D-C-E-F
중위 순회 (Inorder)	D-B-A-E-C-F
후위 순회 (Postorder)	D-B-E-F-C-A

트리 예시4

트리	구하고자 하는 정보	결과
 	차수	2
B의 차수	1
전위 순회 (Preorder)	A-B-D-C-E-G-H-F
중위 순회 (Inorder)	D-B-A-G-E-H-C-F
후위 순회 (Postorder)	D-B-G-H-E-F-C-A
 트리 예시5

트리	구하고자 하는 정보	결과
 	차수	3
B의 차수	3
전위 순회 (Preorder)	A-B-D-H-E-F-C-G
중위 순회 (Inorder)	H-D-B-E-F-A-G-C
후위 순회 (Postorder)	H-D-E-F-B-G-C-A
 트리 예시6

트리	구하고자 하는 정보	결과
 	차수	2
B의 차수	0
전위 순회 (Preorder)	+**/ABCDE
중위 순회 (Inorder)	A/B*C*D+E
후위 순회 (Postorder)	AB/C*D*E+
 트리 예시7

트리	구하고자 하는 정보	결과
 	차수	3
B의 차수	3
전위 순회 (Preorder)	A-B-D-E-F-H-I-C-G
중위 순회 (Inorder)	D-B-E-H-F-I-A-C-G
후위 순회 (Postorder)	D-E-H-I-F-B-G-C-A
 

 

2-2 통합 구현
통합구현
(1) 단위 모듈 구현
단위 모듈 구현은 소프트웨어 개발에 있어 기능을 단위 모듈별로 분할하고 추상화하여 성능을 향상시키고, 유지보수를 효과적으로 하기 위한 구현 기법이다.

 

단위 모듈 구현 원리 (정분추모)

정보 은닉 (Information Hiding)
분할과 정복 (Divide & Conquer)
데이터 추상화 (Data Abstraction)
모듈 독립성 (Module Independency)
 

재사용(Reuse) 종류

구분	설명
재공학	기존 소프트웨어 기능 개선 or 기능 재사용 기법,
장점으로는 위험부담 감소, 비용 절감, 개발 기간 단축, 시스템 명세의 오류억제가 있다.
역공학	SW에 대한 디버깅, 디컴파일 등의 분석을 통해 기존 제품에 구현된 구조, 원리, 기술, 알고리즘 등을 역으로 분석하여 재구성하는 기법
재개발	기존 시스템 내용을 참조하여 완전히 새로운 시스템을 개발, 새로운 기능 추가, 기존 시스템의 기능 변경 기법
 단위 모듈 테스트의 종류

종류	설명
블랙박스 테스트	명세 기반 테스트, 외부 사용자의 요구사항 명세를 보면서 수행하는 테스트(기능 테스트)
화이트박스 테스트	구조 기반 테스트, 모듈 내부 소스 코드를 보면서 수행하는 테스트
메서드 기반 테스트	메서드 기반 테스트, 메서드에 서로 다른 파라미터 값을 호출하면서 테스트
화면 기반 테스트	사용자 시나리오 기반 테스트, 개발 후 화면에 직접 데이터를 입력하여 수행하는 테스트
 

(2) 통합구현 관리
IDE(Integrated Development Environment) 도구

코딩, 디버그, 컴파일, 배포 등 프로그램 개발과 관련된 모든 작업을 하나의 프로그램 안에서 처리하는 환경을 제공하는 소프트웨어이다.

ex) 이클립스 / 비주얼 스튜디오 / 엑스 코드 등

 

IDE 제공기능

개발환경 지원 / 컴파일 / 디버깅 / 외부 연계 / DB 연동

 

협업 도구

통합 구현 관리를 위해 개발자 간 상호 소통을 하는 협업 도구이다.

ex) 구글 드라이브 / 깃허브 / 에버노트 / 레드 펜 / 마인드 마이스터 / 트렐로 / 레드마인 / 지라 / 구글캘린더 등

분류: 문서 공유 / 소스 공유 / 아이디어 공유 / 디자인 공유 / 마인드 맵 / 프로젝트 관리 / 일정 관리
 협업 도구 기능

개발자 간 커뮤니케이션
일정 및 이슈 공유
개발자 간 집단 지성 활용
 

형상 관리 도구
형상 관리(Configuration Management)는 개발 과정의 변경 사항을 관리한다.

ex) CVS, SVN, Git 등

 

형상관리 관리항목 (분코지) [2020년 4회]

프로젝트 요구 분석서
소스 코드
운영 및 설치 지침서
 

형상 관리 도구의 주요 기능 (인아커) [2020년 3회]

체크인(Check-In)
체크아웃(Check-Out)
커밋(Commit)
2-3 제품 소프트웨어 패키징
제품 소프트웨어 패키징
(1) 애플리케이션 패키징
애플리케이션 패키징(Application Packaging)은 개발이 완료된 소프트웨어를 배포하고 설치할 수 있도록 고객에게 전달하기 위한 형태로 제작하고, 설치와 사용에 대한 제반 내용을 포함하는 메뉴얼을 작성하는 활동이다. 사용자 중심으로 진행된다.

 

애플리케이션 패키징 고려사항 (환유관변)

사용자 시스템 환경 정의
UI 제공
관리 서비스 형태로 제공
패키징의 변경 및 개선 관리 고려
 

애플리케이션 패키징 프로세스

기능 식별
모듈화(Modularity)
빌드 진행
사용자 환경 분석
패키징 적용 시험
패키징 변경 개선
(2) 애플리케이션 배포 도구
애플리케이션 배포 도구는 배포를 위한 패키징 시에 디지털 콘텐츠의 지적 재산권을 보호하고 관리하는 기능을 제공하며, 안전한 유통과 배포를 보장하는 도구이자 솔루션이다.

 

애플리케이션 배포 도구의 기술 요소 (DRM 기술요소와 동일) (암키식저 파정크인)

암호화 / 키 관리 / 식별 기술 / 저작권 표현 / 암호화 파일 생성 / 정책 관리 / 크랙 방지 / 인증

 

애플리케이션 배포 도구 활용 시 고려사항 (암이복최)

암호화/보안
이기종 연동(DRM 연동 고려)
복잡성 및 비효율성 문제
최적합 암호화 알고리즘 적용
(3) 애플리케이션 모니터링 도구
애플리케이션 모니터링 도구는 제품 소프트웨어를 사용자 환경에 설치한 후 기능 및 성능, 운영 현황을 모니터링하여 제품을 최적화하기 위한 도구이다.

 

애플리케이션 모니터링 도구의 기능

2020년 1회 기출에 "소스 코드 품질분석 도구 중 정적 분석 도구가 아닌 것은?" 문제가 출제되었습니다.

기능	설명	도구
변경 관리	종속관계 모니터링	ChangeMiner
성능 관리	트랜잭션 수량, 처리시산, 응답시간 모니터링	Jeniffer, Nmon
정적 분석	소스코드 잠재적 문제 발견, 코딩 규칙 오류 발견	PMD, Cppcheck, Checkstyle, SonarQube
동적 분석	프로그램 결함 및 취약점 동적 분석 도구	Avalanche, Valgrind
 애플리케이션 모니터링 도구 활용에 따른 효과

서비스 가용성 / 서비스 성능 / 장애인지/리소스 측정 / 근본 원인 분석

(4) 디지털 저작권 관리(DRM; Digital Rights Management)
DRM은 디지털 콘텐츠에 대한 권리정보를 지정하고 암호화 기술을 이용하여 허가된 사용자의 허가된 권한 범위 내에서 콘텐츠의 이용이 가능하도록 통제하는 기술이다.

 

DRM의 특징

거래 투명성 / 사용규칙 제공 / 자유로운 상거래 제공

 

DRM 구성요소 (제콘패 클 소컨보)

구분	구성요소	구성요소별 설명
콘텐츠 제공자 
DRM 콘텐츠,	서비스하고자 하는 암호화된 콘텐츠, 콘텐츠와 관련된 메타데이터, 콘텐츠 사용 정보를 패키징하여 구성된 콘텐츠
패키저(Packager)	암호화된 콘텐츠, 콘텐츠 관련 메타 데이터, 클리어링 하우스에서 부여받은 콘텐츠 사용정보를 암호화한 콘텐츠로 변환하는 도구
클리어링 하우스 	콘텐츠 정책,
콘텐츠 라이선스,
콘텐츠 관리정보,
콘텐츠 사용정보	클리어링 하우스(Clearing House): 키 관리 및 라이선스 발급 관리
콘텐츠 소비자
DRM 컨트롤러	배포된 콘텐츠의 이용 권한을 통제
보안 컨트롤러	원본 콘텐츠를 안전하게 유통하기 위한 전자적 보안 장치
 DRM의 기술요소 (암키식저 파정크인)

암호화 / 키 관리 / 식별체계 표현 / 저작권 표현 / 암호화 파일 생성 / 정책 관리 / 크랙 방지 / 인증

제품 소프트웨어 매뉴얼 작성
(1) 제품 소프트웨어 매뉴얼
사용자 중심의 기능 및 방법을 나타낸 설명서와 안내서를 의미한다.

종류	설명
제품 소프트웨어 설치 매뉴얼	사용자가 제품을 구매한 후 최초 설치 시 참조하는 매뉴얼이다.
설치 시작부터 완료할 때까지의 전 과정을 빠짐없이 순서대로 설명한다.
제품 소프트웨어 사용자 매뉴얼	설치와 사용에 필요한 제반 절치 및 환경 등 전체 내용을 포함하는 문서이다.
개발된 컴포넌트 사용 시에 알아야할 내용을 기술한다.
 
(2) 국제 표준 제품 품질 특성
국제 표준 제품 품질 특성은 제품에 대하여 명확하게 정의된 특성을 의미하며, 품질을 평가하는 기준 항목이다.

 

국제 제품 품질 표준 
IT 프로젝트를 진행하거나, 완성된 IT 제품에 대해 기능성, 신뢰성 등을 평가하는 기준이 되는 국제 표준이다.
ISO/IEC 9126은 품질 특성 및 측정 기준을 정의하고 있는 표준으로 1991년에 제정된 후 1994년부터 품질 특성과 내부 품질과 외부 품질을 조정하고, 품질 측정 절차를 별도의 ISO/IEC 14598 표준으로 분리하였다.
품질 표준	설명
ISO/IEC 9126	소프트웨어 품질 측정, 평가를 위해 소프트웨어 품질요소와 특성을 정의
ISO/IEC 14598	소프트웨어 제품 평가 프로세스 및 평가 모듈 제공
ISO/IEC 12119	소프트웨어 패키지 제품에 대한 품질 요구사항 및 테스트 국제 표준 [2020년 3회]
ISO/IEC 25000	소프트웨어 품질 평가 통합 모델, SQuaRE로도 불리며, ISO/IEC 9126과 ISO/IEC 14598, ISO/IEC 12119를 통합하고, ISO/IEC 15288을 참고한 소프트웨어 제품 품질에 대한 통합적인 국제표준
 ISO/IEC 9126의 소프트웨어 품질 특성 (기신사효유이)

품질 특성	설명	품질 부특성
기능성 (Functionality)	요구 만족 기능 제공 능력	적합성, 정확성, 상호 운용성, 보안성, 준수성 등
신뢰성 (Reliability)	주어진 시간 내 오류 없이 수행하는 정도 [2020년 3회]	성숙성, 결함 허용성, 회복성, 준수성 등
사용성 (Usability)	이해, 학습, 사용 선호 능력	이해성, 학습성, 운용성, 친밀성, 준수성 등
효율성 (Efficiency)	자원의 양에 따른 성능 제공 능력	시간 반응성, 자원 효율성, 준수성 등
유지보수성 (Maintainability)	제품 변경(수정,개선,개작) 능력	분석성, 변경성, 안정성, 시험성, 준수성 등
이식성 (Portability)	환경 전이 능력	적응성, 설치성, 공존성, 대체성, 준수성
 ISO/IEC 14598의 소프트웨어 품질 특성 (반재공객)

특성	설명
반복성 (Repeatability)	특정 제품을 동일 평가자가  동일 사양으로 평가하면 동일한 결과가 나와야 한다.
재현성 (Reproducibility)	특정 제품을 다른 평가자가 동일 사양을 평가하면 유사한 결과가 나와야 한다.
공정성 (Impartiality)	평가가 특정 결과에 편향되지 않아야 한다.
객관성 (Objectivity)	평가 결과는 객관적 자료에 의해서만 평가되어야 한다.
 ISO/IEC 25000 구성요소 (관모측요평)

품질 관리(2500n) / 품질 모델(2501n) / 품질 측정(2502n) / 품질 요구(2503n) / 품질 평가(2504n)

 

국제 프로세스 품질 표준
ISO/IEC 9001
ISO/IEC 12207 : 기본 프로세스, 지원 프로세스, 조직 프로세스로 구성되어 있다.
ISO/IEC 15504 (SPICE)
CMMi : 프로세스 영역, 목표, 실행, 공통특징으로 구성되어 있다.
 

소프트웨어 품질 측정을 위해 고려해야 할 항목

개발자 관점 : 정확성 / 신뢰성 / 효율성 / 무결성 / 유연성 / 이식성 / 간결성 / 재사용성 / 상호 운용성
 

소프트웨어 공학의 기본원칙
소프트웨어 위기 (Software Crisis)

구분	설명
위기의 원인	소프트웨어의 특징 이해 부족
소프트웨어의 관리 부재
소프트웨어 복잡도 및 크기 증가
소프트웨어 제품 수명주기 단축
위기 극복 방안	공학적 접근, 표준화, 자동화 도구, 품질 보증
 
소프트웨어 공학(Software Engineering; SE)
구분	설명
원칙	품질 높은 소프트웨어 상품 개발, 지속적인 검증 시행, 결과에 대한 명확한 기록 유지
관련 법칙	브룩스의 법칙(Brooks' Law) : 일정이 지연된다고 해서 Project 말기에 새로운 인원을 추가 투입하면 Project는 더욱 지연되게 된다.
파레토 법칙(Pareto Principle) : 소프트웨어 테스트에서 오류의 80%는 전체 모듈의 20% 내에서 발견된다.
롱테일 법칙(Long Tail) : 사소해 보이는 80%의 다수가 20%의 소수 핵심보다도 뛰어난 가치를 창출해낸다.
제품 소프트웨어 버전 관리
소프트웨어 버전 관리 도구

형상 관리 지침을 활용하여 제품 소프트웨어의 신규 개발, 변경, 개선과 관련된 수정 사항을 관리하는 도구이다.

 

제품 소프트웨어 버전 관리

소프트웨어 개발과 관련하여 코드와 라이브러리, 관련 문서 등 시간의 변화에 따른 변경을 관리하는 전체 활동을 의미한다.

 

소프트웨어 버전 관리 도구 유형

버전 관리 도구 유형	예시	설명
공유 폴더 방식	RCS, SCCS	약속된 위치의 공유 폴더에 복사하는 방식
클라이언트/서버 방식	CVS, SVN	중앙에 버전 관리 시스템을 항시 동작시킴
분산 저장소 방식	Git, Bikeeper	로컬 저장소와 원격 저장소로 분리된 구조
 많이 활용되는 버전 관리 도구별 특징

유형	버전 관리 도구	설명
클라이언트-서버
방식	CVS	가장 오래된 형상 관리 도구 중의 하나
SVN	CVS의 단점을 보완해 가장 널리 사용되고 있는 도구
분산형 방식	Git	각 PC 스스로 완전한 저장소가 구성되며, 필요에 따라 중앙 집중형 방식으로도 운영
 소프트웨어 버전 관리 도구 사용 시 유의사항

버전에 대한 쉬운 정보 접근성
불필요한 사용자에 대한 접근 제어
동일 프로젝트에 대한 동시 사용성
빠른 오류 복구
빌드 자동화 도구
빌드 자동화 구성요소

구성요소	설명	도구
CI 서버
(Continuous Integration)	빌드 프로세스를 관리하는 서버 (지속적 통합관리 서버)	Jenkins / Hudson
SCM
(Source Code Management)	소스 코드 형상 관리 시스템	SVN / Git
빌드 도구
(Build Tool)	컴파일, 테스트, 정적분석 등을 통해 동작 가능한 소프트웨어 생성	Ant / Maven
테스트 도구
(Test Tool)	작성된 테스트 코드에 따라 자동으로 테스트를 수행해주는 도구로, 빌드 도구의 스크립트에서 실행	Junit / Selenium
테스트 커버리지 도구
(Test Coverage Tool)	테스트 코드가 대상 소스 코드에 대해 어느 정도 커버하는지 분석하는 도구	Emma
인스펙션 도구
(Inspection Tool)	프로그램을 실행하지 않고, 소스 코드 자체로 품질을 판단할 수 있는 정적 분석 도구
코딩 표준 준수 검사, 코드 메트릭 측정, 중복 코드 검사, 코드 인스펙션 검사	CheckStyle / Cppcheck
 빌드 자동화 도구 - 젠킨스(Jenkins)

젠킨스는 자바(JAVA) 기반의 오픈소스로 가장 많이 사용되는 빌드 자동화 도구이다.
지속적 통합관리(CI)를 가능하게 한다.
서블릿 컨테이너 서버 기반으로 구동되는 시스템이며, CVS, SVN, Git 등 다양한 버전 관리 도구를 지원한다.
 빌드 자동화 도구 - 그래들(Gradle)

그래들은 그루비(Groovy)와 유사한 도메인 언어를 채용했다.
안드로이드 앱을 만드는 데 필요한 안드로이드 스튜디오의 공식 빌드 자동화 시스템이다.
실행할 처리 명령들을 모아 태스크로 만든 후 태스크 단위로 실행한다.
자바(JAVA), C/C++, 파이썬(Python) 등과 같은 여러 가지 언어를 지원한다.
자바 가상머신(JVM) 위에서 동작하는 동적 스크립트 언어이다.
알고리즘(Algorithm)
알고리즘은 어떠한 문제를 해결하기 위한 정해진 일련의 절차나 방법을 공식화한 형태로 표현한 기법이다.
알고리즘의 표현은 자연어, 순서도, 의사 코드, 프로그래밍 언어를 이용하는 방법이 있다.
프로그래밍 언어가 아니더라도 알고리즘의 표현은 가능하다.
 

알고리즘 기법 (분동탐백) [2020년 3회]

*알고리즘 설계 기법을 묻는 문제가 영어로 나온 적이 있습니다.

기법	설명
분할과 정복
(Divide and Conquer)	문제를 나눌 수 없을 때까지 나누고, 각각을 풀면서 다시 병합하여 문제의 답을 얻는 알고리즘
동적계획법
(Dynamic Programming)	어떤 문제를 풀기 위해 그 문제를 더 작은 문제의 연장선으로 생각하고, 과거에 구한 해를 활용하는 방식의 알고리즘
탐욕법
(Greedy)	결정을 해야할 때마다 그 순간에 가장 좋다고 생각되는 것을 해답으로 선택함으로써 최종적인 해답에 도달하는 방식의 알고리즘
백트래킹
(Backtracking)	어떤 노드의 유망성 점검 후, 유망하지 않으면 그 노드의 부모 노드로 되돌아간 후 다른 자손노드를 검색하는 알고리즘
 

시간 복잡도에 따른 알고리즘 분류

복잡도	설명	대표 알고리즘
O(1)	상수형 복잡도	해시 함수(Hash Function)
자료 크기 무관, 항상 같은 속도로 작동
알고리즘 수행 시간이 입력 데이터 수와 관계없이 일정
O(log₂n)	로그형 복잡도	이진 탐색(Binary Search)
문제를 해결하기 위한 단계의 수가 log₂n번만큼의 수행 시간을 가짐
O(n)	선형 복잡도	순차 탐색(Sequential Search)
입력 자료를 차례로 하나씩 모두 처리
수행 시간이 자료 크기와 직접적 관계로 변함 정비례
O(nlog₂n)	선형 로그형 복잡도	퀵 정렬(Quick sort),
병합 정렬(Merge sort)(합병 정렬)
문제를 해결하기 위한 단계의 수가 nlog₂n번만큼의 수행시간을 가짐
O(n²)	제곱형 주요 처리 루프 구조가 2중인 경우	거품 정렬(Bubble sort), 삽입 정렬(Insertion sort), 선택 정렬(Selection sort)
n크기 작을 때에는 n²이 nlogn보다 빠를 수 있음
 

거품 정렬(Bubble Sort) 알고리즘

거품 정렬은 두 인접한 원소를 검사하여 정렬하는 방법이다.
'요소의 개수-1'번 반복하게 되면 모든 숫자가 정렬된다.

거품 정렬(Bubble Sort)

 

삽입 정렬(Insertion Sort) 알고리즘

삽입 정렬은 자료 배열의 모든 요소를 앞에서부터 차례대로 이미 정렬된 배열 부분과 비교하며, 자신의 위치를 찾아 삽입함으로써 정렬을 완성하는 알고리즘이다.

삽입 정렬(Insertion Sort) 선택 정렬(Selection Sort) 알고리즘

정렬되지 않은 데이터들에 대해 가장 작은 데이터를 찾아 정렬되지 않은 부분의 가장 앞의 데이터와 교환해나가는 알고리즘이다.

선택 정렬(Selection Sort)

 

소스 코드 품질 분석
소스 코드 품질 분석은 소스 코드에 대한 코딩 스타일, 설정된 코딩 표준, 코드의 복잡도, 코드 내에 존재하는 메모리 누수 현황, 스레드의 결함 등을 발견하기 위한 활동이다.
 

소스 코드 품질 분석 도구

구분	도구명	설명
정적 분석 도구	pmd	JAVA 및 타 언어 소스 코드에 대한 버그, 데드 코드 분석
cppcheck	C/C++ 코드에 대한 메모리 누수, 오버플로우 등 문제 분석
SonarQube	소스 코드 품질 통합 플랫폼, 플러그인 확장가능
checkstyle	JAVA 코드에 대한 코딩 표준 검사 도구
ccm	다양한 언어의 코드 복잡도 분석 도구, 리눅스, 맥 환경 CLI 형태 지원
cobertura	jcoverage 기반의 테스트 커버리지 측정 도구
동적 분석 도구	Avalanche	Valgrind 프레임워크 및 STP 기반 소프트웨어 에러 및 취약점 동적 분석 도구
Valgrind	자동화된 메모리 및 스레드 결함 발견 분석 도구
 

맥케이브 회전 복잡도(McCabe Cyclomatic Complexity)
맥케이브 회전 복잡도는 소프트웨어의 제어 흐름을 그래프로 표현하고 소스 코드의 복잡도를 정량적으로 나타내는 지표이다.

 

맥케이브 회전 복잡도 측정 방식

구분	항목	대표 알고리즘
계산식	V(G) = E - N + 2	복잡도 V(G)는 노드(N) 수와 간선(E) 수로 계산
V(G) = P + 1	복잡도 V(G)는 조건 분기문(P)의 수로 계산
그래프 구성	Node	동그라미, 프로세싱 태스크 표현
Edge	실선 화살표, 태스크 간의 제어 흐름 표현
 맥케이브 회전 복잡도 측정 예시문제

제어 흐름 그래프	맥케이브 회전 수 (McCabe Cyclomatic)
 	*맥케이브 회전 수 구하는 공식 : V(G) = E - N + 2

V(G) = E - N + 2
      = 화살표 수 - 노드 수 + 2
      = 6 - 4 + 2
      = 4
 

코드 최적화(Code Optimization)
읽기 쉽고 변경 및 추가가 쉬운 클린 코드를 작성하는 것이다.
소스 코드 품질을 위해 기본적으로 지킬 원칙과 기준을 정의하고 있다.
 

배드 코드(Bad Code) 유형

배드 코드 유형	설명
오염	비즈니스 기능을 수행하지 못하는 많은 컴포넌트들이 존재
문서부족	현재 코드와 문서가 불일치함
의미 없는 이름	함수, 클래스, 컴포넌트 이름들이 명확한 의미를 갖지 못하거나 실제 작동과 불일치
높은 결합도	복잡한 연결
아키텍처 침식	아키텍처가 구별되지 않음
외계인 코드
(Alien Code)	아주 오래되거나 참고문서 또는 개발자가 없어 유지보수 작업이 어려운 코드
스파게티 코드
(Spaghetti Code)	코드 작동은 정상적으로 하지만, 사람이 파악하기 어려운 코드
알 수 없는 변수명	변수나 메서드에 대한 이름 정의를 알 수 없는 코드
로직 중복	동일한 처리 로직이 중복되게 작성된 코드
 

클린코드(Clean Code)의 작성 원칙 (가단의 중추)

가독성 / 단순성 / 의존성 최소 / 중복성 제거 / 추상화

 

2-4 애플리케이션 테스트 관리
테스트 케이스(Test Case)
테스트 케이스는 특정 요구사항에 준수하는 지를 확인하기 위해 개발된 입력값, 실행 조건, 예상된 결과의 집합이다.

 

테스트 케이스 작성 절차

테스트 계획 검토 및 자료 확보
위험 평가 및 우선순위 결정
테스트 요구사항 정의
테스트 구조 설계 및 테스트 방법 결정
테스트 케이스 정의
테스트 케이스 타당성 확인 및 유지보수
 

테스트 케이스 구성요소(ISO/IEC/IEEE 29119-3 표준)

식별자 (Identifier)
테스트 항목 (Test Item)
입력명세 (Input Specification)
출력명세 (Output Specification)
환경설정 (Environmental Needs)
특수절차요구 (Special Procedure Requirement)
의존성 기술 (Inter-case Dependencies)
 

테스트 오라클(Test Oracle)
테스트 오라클은 테스트의 결과가 참인지 거짓인지를 판단하기 위해서 사전에 정의된 참값을 입력하여 비교하는 기법이다. [2020년 4회]

 

테스트 오라클 종류 (참샘휴일)

참(True) 오라클 / 샘플링 오라클 / 휴리스틱 오라클 / 일관성 검사(Consistent) 오라클

 

 

테스트 레벨(Test Level)
테스트 레벨은 함께 편성되고 관리되는 테스트 활동의 그룹이다.
프로젝트에서 책임과 연관 되어있다.
각각의 테스트 레벨은 서로 독립적이다.
 

테스트 레벨 종류 (단통시인)

종류	설명	기법
단위 테스트
(Unit Test)	사용자 요구사항에 대한 단위 모듈, 서브루틴 등을 테스트하는 단계	인터페이스 테스트
자료 구조 테스트
실행 경로 테스트
오류 처리 테스트
통합 테스트
(Integration Test)	단위 테스트를 통과한 컴포넌트 간의 인터페이스를 테스트하는 단계	빅뱅 테스트
상향식/하향식 테스트
시스템 테스트
(System Test)	개발 프로젝트 차원에서 정의된 전체 시스템 또는 제품의 동작에 대해 테스트하는 단계	기능/비기능 요구사항 테스트
인수 테스트
(Acceptance Test)	계약상의 요구사항이 만족되었는지 확인하기 위한 테스트 단계	알파/베타 테스트
*알파: 사용자-개발자 함께 확인
*베타: 사용자 확인
 

테스트 시나리오(Test Scenario)
테스트 시나리오는 애플리케이션의 테스트되어야 할 기능 및 특징, 테스트가 필요한 상황을 작성한 문서이다.

 

테스트 지식 체계
프로그램 실행 여부에 따른 분류

분류	설명	유형
정적 테스트	테스트 대상을 실행하지 않고 구조를 분석하여 논리성 검증	리뷰(동료 검토, 워크 스루, 인스펙션), 정적분석
동적 테스트	소프트웨어를 실행하여 결함 검출	화이트/블랙박스 테스트, 경험기반 테스트
 화이트/블랙박스 테스트

종류	설명
블랙박스 테스트
명세 기반 테스트, 외부 사용자의 요구사항 명세를 보면서 수행하는 테스트(기능 테스트)
화이트박스 테스트	구조 기반 테스트, 모듈 내부 소스 코드를 보면서 수행하는 테스트
 블랙박스 테스트 유형 (동경결상 유분페원비) [2020년 3회]

동등 분할 테스트 (Equivalence Partitioning Testing) (=동치 분할) (=균등 분할)
경곗값 분석 테스트 (Boundary Value Analysis Testing) (=한곗값)
결정 테이블 테스트 (Decision Table Testing)
상태전이 테스트 (State Transition Testing)
유스케이스 테스트 (Use Case Testing)
분류 트리 테스트 (Classification Tree Method Testing)
페어와이즈 테스트 (Pairwise Testing)
원인-결과 그래프 테스트 (Cause-Effect Graphing Testing)
비교 테스트 (Comparison Testing)
오류 예측 테스트
경험기반 테스트
 

화이트박스 테스트 유형 (구결조 조변다 기제데)

유형	설명
구문(문장) 커버리지(Statement Coverage)	프로그램 내의 모든 명령문을 적어도 한 번 수행
결정 커버리지(Decision Coverage)(=선택/분기(Branch) 커버리지)	결정 포인트 내의 전체 조건식이 적어도 한 번은 참(T)과 거짓(F)의 결과를 수행
조건 커버리지(Condition Coverage)	결정 포인트 내의 각 개별 조건식이 적어도 한 번은 참과 거짓의 결과가 되도록 수행
조건/결정 커버리지(Condition/Decision Coverage)	전체 조건식뿐만 아니라 개별 조건식도 참 한 번, 거짓 한 번 결과가 되고록 수행
변경 조건/결정 커버리지(Modified Condition/Desition Coverage)	개별 조건식이 다른 조건식에 영향을 받지 않고 전체 조건식에 독립적으로 영향을 주도록 함으로써 조건/결정 커버리지를 향상시킨 커버리지
다중 조건 커버리지(Multiple Condition Coverage)	결정 조건 내 모든 개별 조건식의 모든 가능한 조합을 100% 보장
(기본) 경로 커버리지(Base Path Coverage)	수행 가능한 모든 경로 테스트
제어 흐름 테스트(Control Flow Testing)	프로그램 제어구조를 그래프 형태로 나타내어 내부 로직 테스트
데이터 흐름 테스트(Data Flow Testing)	제어흐름 그래프에 데이터 사용현황을 추가한 그래프를 통해 테스트
 

테스트 시각에 따른 분류

검증(Verification) / 확인(Validation)

 

테스트 목적에 따른 분류 (회안성구회병)

회복(Recovery) 테스트 / 안전(Security) 테스트 / 성능(Performance) 테스트 / 구조(Structure) 테스트 / 회귀(Regression) 테스트 / 병행(Parallel) 테스트

→  중국의 회안성에 사는 구회병씨

 

성능 테스트의 상세 유형 (부스스내)

부하 테스트 / 스트레스 테스트 / 스파이크 테스트 / 내구성 테스트

→ 부스스하고 내복 입고 일어남

 

소프트웨어 테스트의 원리 (결완초집 살정오)

결함이 존재 / 완벽한 테스팅 불가능 / 초기에 테스팅 시작 / 결함 집중 / 살충제 패러독스 / 정황에 의존 / 오류 부재의 궤변

 

(2) 애플리케이션 통합 테스트
코드 커버리지 유형 (구결조 조변다)

구분(문장) / 결정 / 조건 / 조건,결정 / 변경 조건,결정 / 다중 조건

 

 

테스트 자동화 도구
테스트 도구를 활용하여 반복적인 테스트 작업을 스크립트 형태로 구현함으로써 테스트 시간 단축과 인력 투입 비용을 최소화하며, 쉽고 효율적인 테스트를 수행할 수 있는 방법이다.

 

테스트 자동화 도구 유형

구분	테스트 자동화 도구
정적 분석 도구
(Static Analysis Tools)	PMD, Checkstyle, Splint, Cppcheck, SonarQube 등
테스트 실행 도구
(Test Execution Tools)	JMeter, OpenSTA 등
성능 테스트 도구
(Performance Test Tools)	Cobertura, Clover 등
테스트 통제 도구
(Test Control Tools)	Hudson, Ant, xUnit 등
 테스트 장치(Test Harness) 구성요소 (드스슈 시스목)

테스트 드라이버 / 테스트 스텁(Stub) / 테스트 슈트(Suit) / 테스트 시나리오 / 테스트 스크립트 / 목(Mock) 오브젝트

* +) 테스트 케이스

 

 

통합 테스트(Integration Test)
소프트웨어 각 모듈 간의 인터페이스 관련 오류 및 결함을 찾아내기 위한 테스트이다.
단위 테스트가 끝난 모듈 또는 컴포넌트 단위의 프로그램이 설계 단계에서 제시한 애플리케이션과 동일한 구조와 기능으로 구현된 것인지를 확인하는 것이다.
 

통합테스트 수행방법의 분류

(하스 상드) 하향식(스텁) / 상향식(드라이버)

구분	설명
하향식 통합 테스트
(Top Down Test)	메인 제어 모듈(프로그램)로부터 아래 방향으로 제어의 경로를 따라 이동하면서 하향식으로 통합하는 테스트이다.
상향식 통합 테스트
(Bottom Up Test)	애플리케이션 구조에서 최하위 레벨의 모듈 또는 컴포넌트로부터 점진적으로 상위 모듈과 함께 테스트하는 기법이다.
 
2-5 인터페이스 구현
(1) 내·외부 인터페이스 기술 표준 확인
대표적인 방법은 EAI와 ESB 방식이 있다.

 

EAI(Enterprise Application Integration) [2020년 4회]

기업 내 각종 플랫폼 및 애플리케이션들을 통합하여, 동일한 플랫폼을 통해 서로 커뮤니션하도록 하는 것을 목적으로 한다.
기업이 비즈니스 프로세스를 중심으로 여러 애플리케이션 간의 네트워크를 통합 관리한다.
대상 시스템에 비표준 어댑터(Adapter)를 배포하여 통합한다.
Hub & Spoke와 Message Bus의 혼합방식이다.
필요한 경우 한 가지의 EAI 구현이 가능하다.
데이터 병목 현상을 최소화할 수 있다.
 

EAI 구축 유형 (포허 메하)

포인트 투 포인트(Point-to-point) / 허브 앤 스포크(Hub & Spoke) / 메시지 버스(Message Bus)/ 하이브리드(Hybrid)

 

ESB(Enterprise Service Bus)

기업에서 운영되는 서로 다른 플랫폼(이기종) 및 애플리케이션간을 연계해서 관리 운영할 수 있도록 서비스 중심의 통합을 지향하는 기술이다.
개방형 표준인 Web Service를 이용한다.
ESB는 버스를 중심으로 각각 프로토콜이 호환 가능하도록 애플리케이션의 통합을 낮은 결합 방식으로 지원하는 방식이다.
인터페이스 보안 구현
구분	설명
시큐어 코딩 가이드 적용	인터페이스 보안 취약점 방지
데이터베이스 보안 적용	데이터베이스 기밀성 유지
중요 인터페이스 데이터의 암호화 전송	IPSec, SSL/TLS, S-HTTP 등 보안 채널을 활용하여 암·복호화 과정을 거쳐 전송
 시큐어 코딩 가이드 적용 대상 (입보시 에코캡아)

입력데이터 검증 및 표현
보안 기능
시간 및 상태
에러 처리
코드 오류
캡슐화
API 오용
 

데이터베이스 암호화 알고리즘 유형 (대비해)

대칭 키 암호화 알고리즘
비대칭 키 암호화 알고리즘
해시 암호화 알고리즘
 

데이터베이스 암호화 기법 유형 (애플하)

API 방식
Plug-in 방식
Hybrid 방식
(2) 인터페이스 구현 기술
구분	설명
JSON	비동기 브라우저/서버 통신(AJAX)을 위해 "속성-값 쌍", "키-값 쌍"으로 이루어진 데이터 오브젝트를 전달하기 위해 인간이 읽을 수 있는 텍스트를 사용하는 개방형 표준 포맷이다.
REST	웹과 같은 분산 하이퍼 미디어 환경에서 자원의 존재/상태 정보를 표준화된 HTTP 메서드로 주고받는 웹 아키텍처이다.
AJAX	Asynchronous Java Script and XML 약어
javascript를 사용한 비동기 통신기술로 클라이언트와 서버 간에 XML 데이터를 주고받는 기술 [2020년 3회]

(3) 인터페이스 구현 검증
인터페이스 구현 검증 도구 (엑스피 엔셀웨)

검증 도구	설명
xUnit	java(Junit), C++(Cppunit), .Net(Nunit) 등 다양한 언어를 지원하는 단위 테스트 프레임워크
STAF	서비스 호출, 컴포넌트 재사용 등 다양한 환경을 지원하는 테스트 프레임워크
FitNesse	웹 기반 테스트 케이스 설계/실행/결과 확인 등을 지원하는 테스트 프레임워크
NTAF	FitNesse와 STAF의 장점을 결합하여 개발된 테스트 자동화 프레임워크
Selenium	다양한 브라우저 지원 및 개발언어를 지원하는 웹 애플리케이션 테스트 프레임워크
watir	Rudy 기반 웹 애플리케이션 테스트 프레임워크
